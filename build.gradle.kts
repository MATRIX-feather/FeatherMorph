import groovy.lang.Closure
import net.minecrell.pluginyml.bukkit.BukkitPluginDescription

/*
 * This file was generated by the Gradle 'init' task.
 */

plugins {
    java
    `maven-publish`
    id("io.papermc.paperweight.userdev") version "1.4.0"
    id("xyz.jpenilla.run-paper") version "2.0.1" // Adds runServer and runMojangMappedServer tasks for testing
    id("net.minecrell.plugin-yml.bukkit") version "0.5.2" // Generates plugin.yml
}

repositories {
    mavenLocal()
    maven {
        url = uri("https://repo.papermc.io/repository/maven-public/")
    }

    maven {
        url = uri("https://jitpack.io")
    }

    maven {
        url = uri("https://oss.sonatype.org/content/groups/public/")
    }

    maven {
        url = uri("https://repo.md-5.net/content/groups/public/")
    }

    maven {
        url = uri("https://repo.extendedclip.com/content/repositories/placeholderapi/")
    }

    maven {
        url = uri("https://repo.maven.apache.org/maven2/")
    }
}

dependencies {
    compileOnly("io.papermc.paper:paper-api:${project.property("minecraft_version")}")
    paperDevBundle("${project.property("minecraft_version")}")

    compileOnly("LibsDisguises:LibsDisguises:${project.property("ld_version")}")
    {
        exclude("org.spigotmc", "spigot-api")
        exclude("org.spigotmc", "spigot")
    }
    compileOnly("com.github.XiaMoZhiShi:PluginBase:${project.property("pluginbase_version")}")
    compileOnly("com.github.Gecolay:GSit:${project.property("gsit_version")}")
    compileOnly("me.clip:placeholderapi:${project.property("papi_version")}")
}

group = "xiamomc.morph"
version = "${project.property("project_version")}"
description = "Morph"
java.sourceCompatibility = JavaVersion.VERSION_17

bukkit {
    load = BukkitPluginDescription.PluginLoadOrder.POSTWORLD
    main = "xiamomc.morph.MorphPlugin"
    apiVersion = "1.19"
    authors = listOf("MATRIX-feather")
    depend = listOf("LibsDisguises", "PluginBase")
    softDepend = listOf("GSit", "PlaceholderAPI")
    version = "${project.property("project_version")}"
    prefix = "FeatherMorph"
    name = "FeatherMorph"

    commands {
        register("morph")
        register("morphplayer")
        register("unmorph")

        register("request")

        register("feathermorph")
    }

    val permissionRoot = "xiamomc.morph."

    permissions {
        register(permissionRoot + "morph")
        register(permissionRoot + "unmorph")
        register(permissionRoot + "headmorph")

        register(permissionRoot + "skill")
        register(permissionRoot + "reverse")
        register(permissionRoot + "chatoverride")

        register(permissionRoot + "request.send")
        register(permissionRoot + "request.accept")
        register(permissionRoot + "request.deny")
    }

    permissions.forEach {
        permission -> permission.default = BukkitPluginDescription.Permission.Default.TRUE
    }
}

publishing {
    publications.create<MavenPublication>("maven") {
        from(components["java"])
    }
}

tasks.build {
    dependsOn(tasks.reobfJar)
}

tasks.withType<JavaCompile>() {
    options.encoding = "UTF-8"
}
